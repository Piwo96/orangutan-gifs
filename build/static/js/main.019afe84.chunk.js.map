{"version":3,"sources":["App.js","index.js","assets/twitter-logo.svg"],"names":["TWITTER_LINK","concat","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","console","log","publicKey","toString","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","GifItem","_React$Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","upvoteGif","asyncToGenerator","regenerator_default","a","mark","_callee","provider","program","wrap","_context","prev","next","getProvider","Program","rpc","state","gifLink","accounts","user","wallet","getGifList","t0","removeWalletAddressFromVoteArray","upvotedUsers","walletAddress","setState","prevState","voteCount","stop","downvoteGif","_callee2","_context2","downvotedUsers","deleteGif","_callee3","_context3","removeGif","removeUpvote","_callee4","_context4","cancleUpvoteGif","removeDownvote","_callee5","_context5","cancleDownvoteGif","userAddress","Array","setVoteArray","userUpvoted","userDownvoted","setUserVotedState","incrementVoteCount","bind","assertThisInitialized","decrementVoteCount","inherits","createClass","key","value","voteArray","voteArrayPubkeys","i","length","pubkeyString","pubkeyToString","push","pubkey","splice","voteArrayContainsWalletAddress","_this2","_this3","_this4","cancleDownvote","_this5","cancleUpvote","_this6","react_default","createElement","className","src","onClick","renderDeleteButton","React","Component","_useState","useState","_useState2","slicedToArray","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","useEffect","onLoad","_ref6","_callee6","_context6","checkIfWalletIsConnected","apply","arguments","window","addEventListener","removeEventListener","_ref7","_callee7","_window","solana","response","_context7","isPhantom","connect","onlyIfTrusted","sent","alert","error","connection","Connection","Provider","connectWallet","_ref8","_callee8","_window2","_context8","_ref9","_callee9","account","_context9","fetch","sendGif","_ref10","_callee10","_context10","abrupt","addGif","createGifAccount","_ref11","_callee11","_context11","startStuffOff","systemProgram","programId","signers","onInputChange","event","target","onInputSubmit","preventDefault","onSubmit","type","placeholder","onChange","map","item","index","renderConnectedContainer","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.019afe84.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from \"./idl.json\";\nimport kp from './keypair.json';\n// import GifItem from './components/GifItem.js';\n\n// Constants\nconst TWITTER_HANDLE = 'nasty_piwo';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n// let baseAccount = Keypair.generate();\n// As we want all users to talk to the same baseAccount we rather write it to a json file.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\nconsole.log(baseAccount.publicKey.toString());\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n  'https://media0.giphy.com/media/YKFnKWYbKREHu/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/wtNOUuCzFKcaA/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media2.giphy.com/media/8yyJH4yzqgx0Y/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/nVySvk13dgluU/200.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=200.gif&ct=g'\n]\n\nconst App = () => {\n\n  class GifItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.walletAddress = props.walletAddress.toString();\n        this.state = {\n            userAddress: \"\",\n            gifLink: \"\",\n            voteCount: 0,\n            upvotedUsers: [],\n            downvotedUsers: [],\n        };\n        this.upvotedUsers = new Array();\n        this.downvotedUsers = new Array();\n        this.setVoteArray(this.upvotedUsers, this.props.upvotedUsers);\n        this.setVoteArray(this.downvotedUsers, this.props.downvotedUsers);\n        console.log(`Upvoted Users: ${this.upvotedUsers}`);\n        console.log(`Downvoted Users: ${this.downvotedUsers}`);\n        this.userUpvoted = false;\n        this.userDownvoted = false;\n\n        this.setUserVotedState();\n  \n        // bindings are necessary to make `this` work in the callback\n        this.incrementVoteCount = this.incrementVoteCount.bind(this);\n        this.decrementVoteCount = this.decrementVoteCount.bind(this);\n    }\n\n    setVoteArray(voteArray, voteArrayPubkeys) {\n      for( var i = 0; i < voteArrayPubkeys.length; i++){\n        let pubkeyString = this.pubkeyToString(voteArrayPubkeys[i]);\n        voteArray.push(pubkeyString);\n      }\n    }\n\n    pubkeyToString(pubkey){\n      return pubkey.toString();\n    }\n  \n    componentDidMount() {\n        this.setState({\n            userAddress: this.props.userAddress.toString(),\n            gifLink: this.props.gifLink.toString(),\n            voteCount: this.props.voteCount,\n            upvotedUsers: this.props.upvotedUsers,\n            downvotedUsers: this.props.downvotedUsers,\n        });\n    }\n  \n    voteArrayContainsWalletAddress (voteArray, user) {\n      for( var i = 0; i < voteArray.length; i++) {\n        if (voteArray[i] === user){\n          return true;\n        }\n      }\n      return false\n    }\n  \n    removeWalletAddressFromVoteArray (voteArray, user) {\n      for( var i = 0; i < voteArray.length; i++){\n        if (voteArray[i] === user){\n          voteArray.splice(i, 1);\n        }\n      }\n    }\n  \n    setUserVotedState () {\n      this.userUpvoted = this.voteArrayContainsWalletAddress(this.upvotedUsers, this.walletAddress);\n      this.userDownvoted = this.voteArrayContainsWalletAddress(this.downvotedUsers, this.walletAddress);\n    }\n  \n    upvoteGif = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n    \n        await program.rpc.upvoteGif(this.state.gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully upvoted\")\n    \n        await getGifList();\n      } catch (error) {\n        console.log(\"Error upvoting GIF:\", error)\n        this.removeWalletAddressFromVoteArray(this.upvotedUsers, this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount -= 1,\n          upvotedUsers: this.upvotedUsers,\n        }));\n      }\n    };\n  \n    downvoteGif = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n    \n        await program.rpc.downvoteGif(this.state.gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully downvoted\")\n    \n        await getGifList();\n      } catch (error) {\n        console.log(\"Error downvoting GIF:\", error)\n        this.removeWalletAddressFromVoteArray(this.downvotedUsers, this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount += 1,\n          downvotedUsers: this.downvotedUsers,\n        }));\n      }\n    };\n  \n    deleteGif = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n    \n        await program.rpc.removeGif(this.state.gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully deleted\")\n    \n        await getGifList();\n      } catch (error) {\n        console.log(\"Error deleting GIF:\", error)\n      }\n    };\n\n    cancleUpvote() {\n      this.removeWalletAddressFromVoteArray(this.upvotedUsers, this.walletAddress);\n      this.setState(prevState => ({\n        voteCount: prevState.voteCount -= 1,\n        upvotedUsers: this.upvotedUsers,\n      }));\n      this.removeUpvote();\n      console.log(\"Upvote removed...\");\n    }\n\n    removeUpvote = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n    \n        await program.rpc.cancleUpvoteGif(this.state.gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully downvoted\")\n        await getGifList();\n      } catch (error) {\n        console.log(\"Error downvoting GIF:\", error)\n        this.removeWalletAddressFromVoteArray(this.upvotedUsers, this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount += 1,\n          upvotedUsers: this.upvotedUsers,\n        }));\n      }\n    }\n    \n    cancleDownvote() {\n      this.removeWalletAddressFromVoteArray(this.downvotedUsers, this.walletAddress);\n      this.setState(prevState => ({\n        voteCount: prevState.voteCount += 1,\n        downvotedUsers: this.downvotedUsers,\n      }));\n      this.removeDownvote();\n      console.log(\"Downvote removed...\");\n    }\n\n    removeDownvote = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n    \n        await program.rpc.cancleDownvoteGif(this.state.gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully downvoted\")\n        await getGifList();\n      } catch (error) {\n        console.log(\"Error downvoting GIF:\", error)\n        this.removeWalletAddressFromVoteArray(this.downvotedUsers, this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount -= 1,\n          downvotedUsers: this.downvotedUsers,\n        }));\n      }\n    }\n  \n    incrementVoteCount () {\n      this.setUserVotedState();\n      if (!this.userUpvoted && !this.userDownvoted) {\n        this.upvotedUsers.push(this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount += 1,\n          upvotedUsers: this.upvotedUsers,\n        }));\n        this.upvoteGif();\n        console.log(\"Upvote count incremented...\");\n      }\n      else if (!this.userUpvoted && this.userDownvoted) {\n        this.cancleDownvote();\n      }\n      this.setUserVotedState();\n    }\n  \n    decrementVoteCount () {\n      this.setUserVotedState();\n      if (!this.userUpvoted && !this.userDownvoted) {\n        this.downvotedUsers.push(this.walletAddress);\n        this.setState(prevState => ({\n          voteCount: prevState.voteCount -= 1,\n          downvotedUsers: this.downvotedUsers,\n        }));\n        this.downvoteGif();\n        console.log(\"Downvote count incremented...\");\n      }\n      else if (this.userUpvoted && !this.userDownvoted) {\n        this.cancleUpvote();\n      }\n      this.setUserVotedState();\n    }\n  \n    render() {\n      const renderVoteCount = () => {\n        this.setUserVotedState();\n        if(this.userUpvoted && !this.userDownvoted) {\n          return <p className=\"gif-upvote-count\">{this.state.voteCount}</p>\n        } else if (this.userDownvoted && !this.userUpvoted) {\n          return <p className=\"gif-downvote-count\">{this.state.voteCount}</p>\n        } else {\n          return <p className=\"gif-standard-count\">{this.state.voteCount}</p>\n        }\n      }\n  \n      const renderDeleteButton = () => {\n        if (this.props.userAddress.toString() == this.walletAddress) {\n          return <button className=\"delete-button\" onClick={this.deleteGif}>X</button>\n        }\n      }\n  \n      return (\n        <div className=\"gif-item\">\n          <div className=\"gif-item-content\">\n            <small className=\"gif-user-address\">User address: {this.props.userAddress.toString()}</small>\n            <img src={this.props.gifLink.toString()} />\n          </div>\n          <div className=\"gif-side-container\">\n            <div className=\"gif-vote-container\">\n              <button className=\"gif-upvote-button\" onClick={this.incrementVoteCount}>⬆</button>\n              {renderVoteCount()}\n              <button className=\"gif-downvote-button\" onClick={this.decrementVoteCount}>⬇</button>\n            </div>\n            {renderDeleteButton()}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // useEffects\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  // useEffect is a hook that allows aus to do something immediately after a state like the componet or \n  // a field like the walletAdress in the second useEffect has rendered/changed\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  // Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n    // UI events\n    const onInputChange = (event) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n  \n    const onInputSubmit = (event) => {\n      event.preventDefault();\n      sendGif();\n    }\n\n  const renderConnectedContainer = () => {\n    const provider = getProvider();\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={onInputSubmit}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* {TEST_GIFS.map(gif => (\n              <div className=\"gif-item\" key={gif}>\n                <img src={gif} alt={gif} />\n              </div>\n              ))} */}\n              {/* Map through gifList instead of TEST_GIFS */}\n              {/* {gifList.map((gif) => (\n                <div className=\"gif-item\" key={gif}>\n                  <img src={gif} alt={gif} />\n                </div>\n              ))} */}\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <GifItem className=\"gif-item-container\"\n                  key={index} \n                  userAddress={item.userAddress} \n                  gifLink={item.gifLink} \n                  upvotedUsers={item.upvotedUsers}\n                  downvotedUsers={item.downvotedUsers}\n                  voteCount={item.voteCount}\n                  walletAddress={provider.wallet.publicKey}/>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    };\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🦧 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your orangutan GIF collection in the metaverse ✨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.5c97ee2a.svg\";"],"sourceRoot":""}