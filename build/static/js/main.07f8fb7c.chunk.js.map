{"version":3,"sources":["App.js","index.js","assets/twitter-logo.svg"],"names":["TWITTER_LINK","concat","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","_useState","useState","_useState2","slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","useEffect","onLoad","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","checkIfWalletIsConnected","stop","apply","this","arguments","window","addEventListener","removeEventListener","console","log","getGifList","_ref2","_callee2","_window","solana","response","_context2","isPhantom","connect","onlyIfTrusted","sent","publicKey","toString","alert","t0","error","getProvider","connection","Connection","Provider","connectWallet","_ref3","_callee3","_window2","_context3","_ref4","_callee4","provider","program","account","_context4","Program","fetch","sendGif","_ref5","_callee5","_context5","length","abrupt","rpc","addGif","accounts","user","wallet","createGifAccount","_ref6","_callee6","_context6","startStuffOff","systemProgram","programId","signers","onInputChange","event","value","target","onInputSubmit","preventDefault","react_default","createElement","className","onClick","onSubmit","type","placeholder","onChange","map","item","index","key","src","gifLink","userAddress","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.07f8fb7c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from \"./idl.json\";\nimport kp from './keypair.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = 'nasty_piwo';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n// let baseAccount = Keypair.generate();\n// As we want all users to talk to the same baseAccount we rather write it to a json file.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n  'https://media0.giphy.com/media/YKFnKWYbKREHu/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/wtNOUuCzFKcaA/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media2.giphy.com/media/8yyJH4yzqgx0Y/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/nVySvk13dgluU/200.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=200.gif&ct=g'\n]\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // useEffects\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  // useEffect is a hook that allows aus to do something immediately after a state like the componet or \n  // a field like the walletAdress in the second useEffect has rendered/changed\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  // Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n    // UI events\n    const onInputChange = (event) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n  \n    const onInputSubmit = (event) => {\n      event.preventDefault();\n      sendGif();\n    }\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={onInputSubmit}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* {TEST_GIFS.map(gif => (\n              <div className=\"gif-item\" key={gif}>\n                <img src={gif} alt={gif} />\n              </div>\n              ))} */}\n              {/* Map through gifList instead of TEST_GIFS */}\n              {/* {gifList.map((gif) => (\n                <div className=\"gif-item\" key={gif}>\n                  <img src={gif} alt={gif} />\n                </div>\n              ))} */}\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                  <small className=\"gif-user-address\">User address: {item.userAddress.toString()}</small>\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    };\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🦧 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your orangutan GIF collection in the metaverse ✨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.5c97ee2a.svg\";"],"sourceRoot":""}