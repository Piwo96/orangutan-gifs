{"version":3,"sources":["App.js","index.js","assets/twitter-logo.svg"],"names":["TWITTER_LINK","concat","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","_useState","useState","_useState2","slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletIsConnected","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","_window","solana","response","wrap","_context","prev","next","window","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","t0","error","stop","apply","this","arguments","connectWallet","_ref2","_callee2","_window2","_context2","sendGif","_ref3","_callee3","provider","program","_context3","length","abrupt","getProvider","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","_ref4","_callee4","_context4","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","_ref5","_callee5","_context5","addEventListener","removeEventListener","_ref6","_callee6","account","_context6","fetch","react_default","createElement","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","key","src","gifLink","userAddress","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.455df107.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from \"./idl.json\";\nimport kp from './keypair.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = 'nasty_piwo';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n// let baseAccount = Keypair.generate();\n// As we want all users to talk to the same baseAccount we rather write it to a json file.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n  'https://media0.giphy.com/media/YKFnKWYbKREHu/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/wtNOUuCzFKcaA/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media2.giphy.com/media/8yyJH4yzqgx0Y/giphy.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=giphy.gif&ct=g',\n  'https://media1.giphy.com/media/nVySvk13dgluU/200.gif?cid=ecf05e471nd4g9za4ai9pmdklf249y7kc75kvxwye0gi7q5y&rid=200.gif&ct=g'\n]\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* {TEST_GIFS.map(gif => (\n              <div className=\"gif-item\" key={gif}>\n                <img src={gif} alt={gif} />\n              </div>\n              ))} */}\n              {/* Map through gifList instead of TEST_GIFS */}\n              {/* {gifList.map((gif) => (\n                <div className=\"gif-item\" key={gif}>\n                  <img src={gif} alt={gif} />\n                </div>\n              ))} */}\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                  <a className=\"gif-user-address\">User address: {item.userAddress.toString()}</a>\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ¦§ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your orangutan GIF collection in the metaverse âœ¨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.5c97ee2a.svg\";"],"sourceRoot":""}